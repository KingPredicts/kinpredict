"""Applied recommended env.py changes and migrating schema

Revision ID: 9a51f96b861e 
Revises: 
Create Date: 2025-05-29 06:41:43.891407

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9a51f96b861e' # Keep your existing revision ID
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - AND MANUALLY CORRECTED/COMPLETED ###

    # --- User Table ---
    op.create_table('user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=20), nullable=False),
        sa.Column('telephone_number', sa.String(length=20), nullable=False),
        sa.Column('password_hash', sa.String(length=60), nullable=False),
        sa.Column('is_admin', sa.Boolean(), nullable=False),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('registration_timestamp', sa.DateTime(timezone=True), nullable=True), # Default is handled by SQLAlchemy model
        sa.Column('approved_by_admin_id', sa.Integer(), nullable=True),
        sa.Column('approval_timestamp', sa.DateTime(timezone=True), nullable=True),
        sa.Column('expiry_duration_seconds', sa.Integer(), nullable=True),
        sa.Column('first_login_timestamp', sa.DateTime(timezone=True), nullable=True),
        sa.Column('actual_expiry_timestamp', sa.DateTime(timezone=True), nullable=True),
        sa.Column('login_device_identifier', sa.String(length=64), nullable=True),
        sa.Column('failed_login_attempts', sa.Integer(), nullable=True), # Default is handled by SQLAlchemy model
        sa.Column('lockout_until', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['approved_by_admin_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('telephone_number'),
        sa.UniqueConstraint('username')
    )

    # --- HistoricalData Table ---
    op.create_table('historical_data',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('date', sa.String(length=10), nullable=False),
        sa.Column('time', sa.String(length=8), nullable=False),
        sa.Column('multiplier', sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )

    # --- PredictionHourly Table ---
    op.create_table('prediction_hourly',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('predicted_datetime_utc', sa.DateTime(timezone=True), nullable=False),
        sa.Column('interval_to_next_seconds', sa.Integer(), nullable=True),
        sa.Column('min_multiplier', sa.Float(), nullable=False),
        sa.Column('avg_multiplier', sa.Float(), nullable=False),
        sa.Column('max_multiplier', sa.Float(), nullable=False),
        sa.Column('confidence', sa.Float(), nullable=False),
        sa.Column('user_verdict', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('prediction_hourly', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_prediction_hourly_predicted_datetime_utc'), ['predicted_datetime_utc'], unique=False)

    # --- Prediction50xHourly Table ---
    op.create_table('prediction_50x_hourly',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('predicted_datetime_utc', sa.DateTime(timezone=True), nullable=False),
        sa.Column('interval_to_next_seconds', sa.Integer(), nullable=True),
        sa.Column('min_multiplier', sa.Float(), nullable=False),
        sa.Column('avg_multiplier', sa.Float(), nullable=False),
        sa.Column('max_multiplier', sa.Float(), nullable=False),
        sa.Column('confidence', sa.Float(), nullable=False),
        sa.Column('user_verdict', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('prediction_50x_hourly', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_prediction_50x_hourly_predicted_datetime_utc'), ['predicted_datetime_utc'], unique=False)

    # --- Prediction50xDaily Table ---
    op.create_table('prediction_50x_daily',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('predicted_datetime_utc', sa.DateTime(timezone=True), nullable=False),
        sa.Column('interval_to_next_seconds', sa.Integer(), nullable=True),
        sa.Column('min_multiplier', sa.Float(), nullable=False),
        sa.Column('avg_multiplier', sa.Float(), nullable=False),
        sa.Column('max_multiplier', sa.Float(), nullable=False),
        sa.Column('confidence', sa.Float(), nullable=False),
        sa.Column('user_verdict', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('prediction_50x_daily', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_prediction_50x_daily_predicted_datetime_utc'), ['predicted_datetime_utc'], unique=False)

    # --- Prediction100x Table ---
    op.create_table('prediction_100x',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('predicted_datetime_utc', sa.DateTime(timezone=True), nullable=False),
        sa.Column('interval_to_next_seconds', sa.Integer(), nullable=True),
        sa.Column('min_multiplier', sa.Float(), nullable=False),
        sa.Column('avg_multiplier', sa.Float(), nullable=False),
        sa.Column('max_multiplier', sa.Float(), nullable=False),
        sa.Column('confidence', sa.Float(), nullable=False),
        sa.Column('user_verdict', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('prediction_100x', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_prediction_100x_predicted_datetime_utc'), ['predicted_datetime_utc'], unique=False)

    # --- Prediction500x Table ---
    op.create_table('prediction_500x',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('predicted_datetime_utc', sa.DateTime(timezone=True), nullable=False),
        sa.Column('interval_to_next_seconds', sa.Integer(), nullable=True),
        sa.Column('min_multiplier', sa.Float(), nullable=False),
        sa.Column('avg_multiplier', sa.Float(), nullable=False),
        sa.Column('max_multiplier', sa.Float(), nullable=False),
        sa.Column('confidence', sa.Float(), nullable=False),
        sa.Column('user_verdict', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('prediction_500x', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_prediction_500x_predicted_datetime_utc'), ['predicted_datetime_utc'], unique=False)

    # --- Prediction1000x Table ---
    op.create_table('prediction_1000x',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('predicted_datetime_utc', sa.DateTime(timezone=True), nullable=False),
        sa.Column('interval_to_next_seconds', sa.Integer(), nullable=True),
        sa.Column('min_multiplier', sa.Float(), nullable=False),
        sa.Column('avg_multiplier', sa.Float(), nullable=False),
        sa.Column('max_multiplier', sa.Float(), nullable=False),
        sa.Column('confidence', sa.Float(), nullable=False),
        sa.Column('user_verdict', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('prediction_1000x', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_prediction_1000x_predicted_datetime_utc'), ['predicted_datetime_utc'], unique=False)

    # --- HighMultiplierPredictionLog Table ---
    op.create_table('high_multiplier_prediction_log',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('predicted_event_time_utc', sa.DateTime(timezone=True), nullable=False),
        sa.Column('likelihood_percentage', sa.Integer(), nullable=False),
        sa.Column('expected_value_multiplier', sa.Float(), nullable=True),
        sa.Column('generated_at_utc', sa.DateTime(timezone=True), nullable=False), # Default handled by SQLAlchemy
        sa.Column('user_verdict', sa.Integer(), nullable=False), # Default handled by SQLAlchemy
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('high_multiplier_prediction_log', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_high_multiplier_prediction_log_generated_at_utc'), ['generated_at_utc'], unique=False)
        batch_op.create_index(batch_op.f('ix_high_multiplier_prediction_log_predicted_event_time_utc'), ['predicted_event_time_utc'], unique=False)

    # --- PredictionMonthly Table ---
    op.create_table('prediction_monthly',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('target_date_utc', sa.Date(), nullable=False),
        sa.Column('predicted_value_utc', sa.DateTime(timezone=True), nullable=True),
        sa.Column('min_multiplier', sa.Float(), nullable=False), # Default handled by SQLAlchemy
        sa.Column('confidence_level', sa.String(length=50), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('generated_at_utc', sa.DateTime(timezone=True), nullable=True), # Default handled by SQLAlchemy
        sa.Column('user_verdict', sa.Integer(), nullable=False), # Default handled by SQLAlchemy
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('prediction_monthly', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_prediction_monthly_target_date_utc'), ['target_date_utc'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - AND MANUALLY CORRECTED/COMPLETED ###
    with op.batch_alter_table('prediction_monthly', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_prediction_monthly_target_date_utc'))
    op.drop_table('prediction_monthly')

    with op.batch_alter_table('high_multiplier_prediction_log', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_high_multiplier_prediction_log_predicted_event_time_utc'))
        batch_op.drop_index(batch_op.f('ix_high_multiplier_prediction_log_generated_at_utc'))
    op.drop_table('high_multiplier_prediction_log')

    with op.batch_alter_table('prediction_1000x', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_prediction_1000x_predicted_datetime_utc'))
    op.drop_table('prediction_1000x')

    with op.batch_alter_table('prediction_500x', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_prediction_500x_predicted_datetime_utc'))
    op.drop_table('prediction_500x')

    with op.batch_alter_table('prediction_100x', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_prediction_100x_predicted_datetime_utc'))
    op.drop_table('prediction_100x')

    with op.batch_alter_table('prediction_50x_daily', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_prediction_50x_daily_predicted_datetime_utc'))
    op.drop_table('prediction_50x_daily')

    with op.batch_alter_table('prediction_50x_hourly', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_prediction_50x_hourly_predicted_datetime_utc'))
    op.drop_table('prediction_50x_hourly')

    with op.batch_alter_table('prediction_hourly', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_prediction_hourly_predicted_datetime_utc'))
    op.drop_table('prediction_hourly')

    op.drop_table('historical_data')
    op.drop_table('user') # User table is dropped last due to ForeignKey from itself
    # ### end Alembic commands ###